
MatCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000776  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800106  00800106  00000810  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a14  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000560  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d60  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  000036f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c5  00000000  00000000  000041c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00005787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	1f c3       	rjmp	.+1598   	; 0x670 <__vector_12>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	05 c1       	rjmp	.+522    	; 0x25c <__vector_20>
  52:	00 00       	nop
  54:	27 c1       	rjmp	.+590    	; 0x2a4 <__vector_21>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c2       	rjmp	.+1154   	; 0x4f4 <__vector_28>
  72:	00 00       	nop
  74:	71 c2       	rjmp	.+1250   	; 0x558 <__vector_29>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 02       	muls	r18, r19
  8e:	39 02       	muls	r19, r25
  90:	39 02       	muls	r19, r25
  92:	39 02       	muls	r19, r25
  94:	39 02       	muls	r19, r25
  96:	39 02       	muls	r19, r25
  98:	39 02       	muls	r19, r25
  9a:	39 02       	muls	r19, r25
  9c:	39 02       	muls	r19, r25
  9e:	39 02       	muls	r19, r25
  a0:	39 02       	muls	r19, r25
  a2:	39 02       	muls	r19, r25
  a4:	39 02       	muls	r19, r25
  a6:	39 02       	muls	r19, r25
  a8:	39 02       	muls	r19, r25
  aa:	39 02       	muls	r19, r25
  ac:	39 02       	muls	r19, r25
  ae:	39 02       	muls	r19, r25
  b0:	39 02       	muls	r19, r25
  b2:	39 02       	muls	r19, r25
  b4:	39 02       	muls	r19, r25
  b6:	39 02       	muls	r19, r25
  b8:	39 02       	muls	r19, r25
  ba:	e9 01       	movw	r28, r18
  bc:	2e 02       	muls	r18, r30
  be:	39 02       	muls	r19, r25
  c0:	0d 02       	muls	r16, r29
  c2:	39 02       	muls	r19, r25
  c4:	39 02       	muls	r19, r25
  c6:	f3 01       	movw	r30, r6
  c8:	39 02       	muls	r19, r25
  ca:	39 02       	muls	r19, r25
  cc:	00 02       	muls	r16, r16
  ce:	39 02       	muls	r19, r25
  d0:	39 02       	muls	r19, r25
  d2:	39 02       	muls	r19, r25
  d4:	39 02       	muls	r19, r25
  d6:	39 02       	muls	r19, r25
  d8:	39 02       	muls	r19, r25
  da:	18 02       	muls	r17, r24

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e4       	ldi	r29, 0x40	; 64
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e6 e7       	ldi	r30, 0x76	; 118
  f0:	f7 e0       	ldi	r31, 0x07	; 7
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	a6 30       	cpi	r26, 0x06	; 6
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	a6 e0       	ldi	r26, 0x06	; 6
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a3 39       	cpi	r26, 0x93	; 147
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	50 d2       	rcall	.+1184   	; 0x5b4 <main>
 114:	2e c3       	rjmp	.+1628   	; 0x772 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <i2c_start>:
	i2c_start_wait(address);
	i2c_write(targetRegister);
	i2c_write(data);
	i2c_stop();
	return;
}/* i2c_writeByte */
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	1f 92       	push	r1
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	94 ea       	ldi	r25, 0xA4	; 164
 128:	90 83       	st	Z, r25
 12a:	90 81       	ld	r25, Z
 12c:	99 23       	and	r25, r25
 12e:	2c f0       	brlt	.+10     	; 0x13a <i2c_start+0x22>
 130:	90 81       	ld	r25, Z
 132:	99 83       	std	Y+1, r25	; 0x01
 134:	90 81       	ld	r25, Z
 136:	99 23       	and	r25, r25
 138:	dc f7       	brge	.-10     	; 0x130 <i2c_start+0x18>
 13a:	e9 eb       	ldi	r30, 0xB9	; 185
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
 140:	98 7f       	andi	r25, 0xF8	; 248
 142:	99 83       	std	Y+1, r25	; 0x01
 144:	90 81       	ld	r25, Z
 146:	98 7f       	andi	r25, 0xF8	; 248
 148:	98 30       	cpi	r25, 0x08	; 8
 14a:	29 f0       	breq	.+10     	; 0x156 <i2c_start+0x3e>
 14c:	90 91 b9 00 	lds	r25, 0x00B9
 150:	98 7f       	andi	r25, 0xF8	; 248
 152:	90 31       	cpi	r25, 0x10	; 16
 154:	b9 f4       	brne	.+46     	; 0x184 <i2c_start+0x6c>
 156:	80 93 bb 00 	sts	0x00BB, r24
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <i2c_start+0x4c>
 16a:	80 91 b9 00 	lds	r24, 0x00B9
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	88 31       	cpi	r24, 0x18	; 24
 176:	41 f0       	breq	.+16     	; 0x188 <i2c_start+0x70>
 178:	99 81       	ldd	r25, Y+1	; 0x01
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 34       	cpi	r25, 0x40	; 64
 17e:	29 f4       	brne	.+10     	; 0x18a <i2c_start+0x72>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	03 c0       	rjmp	.+6      	; 0x18a <i2c_start+0x72>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	01 c0       	rjmp	.+2      	; 0x18a <i2c_start+0x72>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <i2c_start_wait>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec eb       	ldi	r30, 0xBC	; 188
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	24 ea       	ldi	r18, 0xA4	; 164
 19c:	a9 eb       	ldi	r26, 0xB9	; 185
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	cb eb       	ldi	r28, 0xBB	; 187
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	34 e8       	ldi	r19, 0x84	; 132
 1a6:	44 e9       	ldi	r20, 0x94	; 148
 1a8:	20 83       	st	Z, r18
 1aa:	90 81       	ld	r25, Z
 1ac:	99 23       	and	r25, r25
 1ae:	ec f7       	brge	.-6      	; 0x1aa <i2c_start_wait+0x18>
 1b0:	9c 91       	ld	r25, X
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	98 30       	cpi	r25, 0x08	; 8
 1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_start_wait+0x2a>
 1b8:	90 31       	cpi	r25, 0x10	; 16
 1ba:	b1 f7       	brne	.-20     	; 0x1a8 <i2c_start_wait+0x16>
 1bc:	88 83       	st	Y, r24
 1be:	30 83       	st	Z, r19
 1c0:	90 81       	ld	r25, Z
 1c2:	99 23       	and	r25, r25
 1c4:	ec f7       	brge	.-6      	; 0x1c0 <i2c_start_wait+0x2e>
 1c6:	9c 91       	ld	r25, X
 1c8:	98 7f       	andi	r25, 0xF8	; 248
 1ca:	90 32       	cpi	r25, 0x20	; 32
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <i2c_start_wait+0x40>
 1ce:	98 35       	cpi	r25, 0x58	; 88
 1d0:	29 f4       	brne	.+10     	; 0x1dc <i2c_start_wait+0x4a>
 1d2:	40 83       	st	Z, r20
 1d4:	90 81       	ld	r25, Z
 1d6:	94 fd       	sbrc	r25, 4
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <i2c_start_wait+0x42>
 1da:	e6 cf       	rjmp	.-52     	; 0x1a8 <i2c_start_wait+0x16>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	98 31       	cpi	r25, 0x18	; 24
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <i2c_start_wait+0x52>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <i2c_rep_start>:
 1ea:	96 cf       	rjmp	.-212    	; 0x118 <i2c_start>
 1ec:	08 95       	ret

000001ee <i2c_stop>:
 1ee:	84 e9       	ldi	r24, 0x94	; 148
 1f0:	80 93 bc 00 	sts	0x00BC, r24
 1f4:	ec eb       	ldi	r30, 0xBC	; 188
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	84 fd       	sbrc	r24, 4
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <i2c_stop+0xa>
 1fe:	08 95       	ret

00000200 <i2c_write>:
 200:	80 93 bb 00 	sts	0x00BB, r24
 204:	84 e8       	ldi	r24, 0x84	; 132
 206:	80 93 bc 00 	sts	0x00BC, r24
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	ec f7       	brge	.-6      	; 0x20e <i2c_write+0xe>
 214:	90 91 b9 00 	lds	r25, 0x00B9
 218:	98 7f       	andi	r25, 0xF8	; 248
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	98 32       	cpi	r25, 0x28	; 40
 21e:	09 f4       	brne	.+2      	; 0x222 <i2c_write+0x22>
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <i2c_readNak>:
 224:	84 e8       	ldi	r24, 0x84	; 132
 226:	80 93 bc 00 	sts	0x00BC, r24
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	88 23       	and	r24, r24
 232:	ec f7       	brge	.-6      	; 0x22e <i2c_readNak+0xa>
 234:	80 91 bb 00 	lds	r24, 0x00BB
 238:	08 95       	ret

0000023a <i2c_readByte>:
/*************************************************************************
 Read one byte from the I2C device including start and stop condition
 
 Return:  byte read from I2C device
*************************************************************************/
char i2c_readByte(char writeaddress, char readRegister){
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	c8 2f       	mov	r28, r24
 240:	d6 2f       	mov	r29, r22
	char ret;
	i2c_start_wait(writeaddress+I2C_WRITE);
 242:	a7 df       	rcall	.-178    	; 0x192 <i2c_start_wait>
	i2c_write(readRegister);
 244:	8d 2f       	mov	r24, r29
 246:	dc df       	rcall	.-72     	; 0x200 <i2c_write>
	i2c_rep_start(writeaddress+I2C_READ);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	8c 0f       	add	r24, r28
 24c:	ce df       	rcall	.-100    	; 0x1ea <i2c_rep_start>
	ret = i2c_readNak();
 24e:	ea df       	rcall	.-44     	; 0x224 <i2c_readNak>
 250:	c8 2f       	mov	r28, r24
	i2c_stop();
 252:	cd df       	rcall	.-102    	; 0x1ee <i2c_stop>
	return ret;
}/* i2c_readByte */
 254:	8c 2f       	mov	r24, r28
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <__vector_20>:
					break;
				}
			}
	}	
	*length = -1; return;
}
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	1f 92       	push	r1
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	80 91 c6 00 	lds	r24, 0x00C6
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	81 31       	cpi	r24, 0x11	; 17
 280:	19 f4       	brne	.+6      	; 0x288 <__vector_20+0x2c>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 00 01 	sts	0x0100, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	83 31       	cpi	r24, 0x13	; 19
 28c:	11 f4       	brne	.+4      	; 0x292 <__vector_20+0x36>
 28e:	10 92 00 01 	sts	0x0100, r1
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_21>:
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	90 91 6e 01 	lds	r25, 0x016E
 2be:	80 91 6d 01 	lds	r24, 0x016D
 2c2:	98 17       	cp	r25, r24
 2c4:	69 f0       	breq	.+26     	; 0x2e0 <__vector_21+0x3c>
 2c6:	e0 91 6d 01 	lds	r30, 0x016D
 2ca:	ef 5f       	subi	r30, 0xFF	; 255
 2cc:	ef 71       	andi	r30, 0x1F	; 31
 2ce:	e0 93 6d 01 	sts	0x016D, r30
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	e1 59       	subi	r30, 0x91	; 145
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	80 81       	ld	r24, Z
 2da:	80 93 c6 00 	sts	0x00C6, r24
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <__vector_21+0x46>
 2e0:	e1 ec       	ldi	r30, 0xC1	; 193
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	8f 7d       	andi	r24, 0xDF	; 223
 2e8:	80 83       	st	Z, r24
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0b be       	out	0x3b, r0	; 59
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <uart_init>:
 300:	10 92 6e 01 	sts	0x016E, r1
 304:	10 92 6d 01 	sts	0x016D, r1
 308:	10 92 6c 01 	sts	0x016C, r1
 30c:	10 92 6b 01 	sts	0x016B, r1
 310:	99 23       	and	r25, r25
 312:	1c f4       	brge	.+6      	; 0x31a <uart_init+0x1a>
 314:	22 e0       	ldi	r18, 0x02	; 2
 316:	20 93 c0 00 	sts	0x00C0, r18
 31a:	90 78       	andi	r25, 0x80	; 128
 31c:	90 93 c5 00 	sts	0x00C5, r25
 320:	80 93 c4 00 	sts	0x00C4, r24
 324:	88 e9       	ldi	r24, 0x98	; 152
 326:	80 93 c1 00 	sts	0x00C1, r24
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	80 93 c2 00 	sts	0x00C2, r24
 330:	08 95       	ret

00000332 <uart_putc>:
 332:	20 91 6e 01 	lds	r18, 0x016E
 336:	2f 5f       	subi	r18, 0xFF	; 255
 338:	2f 71       	andi	r18, 0x1F	; 31
 33a:	90 91 6d 01 	lds	r25, 0x016D
 33e:	29 17       	cp	r18, r25
 340:	e1 f3       	breq	.-8      	; 0x33a <uart_putc+0x8>
 342:	e2 2f       	mov	r30, r18
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e1 59       	subi	r30, 0x91	; 145
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	80 83       	st	Z, r24
 34c:	20 93 6e 01 	sts	0x016E, r18
 350:	e1 ec       	ldi	r30, 0xC1	; 193
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 62       	ori	r24, 0x20	; 32
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret

0000035c <uart_putData>:

void uart_putData (char* formatstr, ...)
{
 35c:	2f 92       	push	r2
 35e:	3f 92       	push	r3
 360:	4f 92       	push	r4
 362:	5f 92       	push	r5
 364:	6f 92       	push	r6
 366:	7f 92       	push	r7
 368:	8f 92       	push	r8
 36a:	9f 92       	push	r9
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	fe 01       	movw	r30, r28
 388:	76 96       	adiw	r30, 0x16	; 22
 38a:	41 90       	ld	r4, Z+
 38c:	51 90       	ld	r5, Z+
	#define STARTSTOPBYTE 0x7E
	#define ESCBYTE 0x7D
	va_list ap;
	int narg = strlen(formatstr)-1;
 38e:	d2 01       	movw	r26, r4
 390:	0d 90       	ld	r0, X+
 392:	00 20       	and	r0, r0
 394:	e9 f7       	brne	.-6      	; 0x390 <uart_putData+0x34>
 396:	cd 01       	movw	r24, r26
 398:	84 19       	sub	r24, r4
 39a:	95 09       	sbc	r25, r5
 39c:	9c 01       	movw	r18, r24
 39e:	22 50       	subi	r18, 0x02	; 2
 3a0:	31 09       	sbc	r19, r1
 3a2:	39 01       	movw	r6, r18
	char *data_pnt;
	char data_length;
	va_start (ap, formatstr);         /* Initialize the argument list. */	
 3a4:	5f 01       	movw	r10, r30

	uart_putc(STARTSTOPBYTE);
 3a6:	8e e7       	ldi	r24, 0x7E	; 126
 3a8:	c4 df       	rcall	.-120    	; 0x332 <uart_putc>
	
	for (int i = 0; i <= narg; i++){
 3aa:	77 20       	and	r7, r7
 3ac:	0c f4       	brge	.+2      	; 0x3b0 <uart_putData+0x54>
 3ae:	88 c0       	rjmp	.+272    	; 0x4c0 <uart_putData+0x164>
 3b0:	81 2c       	mov	r8, r1
 3b2:	91 2c       	mov	r9, r1
		switch(formatstr[i]){
 3b4:	d2 01       	movw	r26, r4
 3b6:	ed 91       	ld	r30, X+
 3b8:	2d 01       	movw	r4, r26
 3ba:	8e 2f       	mov	r24, r30
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	ec 54       	subi	r30, 0x4C	; 76
 3c2:	f1 09       	sbc	r31, r1
 3c4:	e8 32       	cpi	r30, 0x28	; 40
 3c6:	f1 05       	cpc	r31, r1
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <uart_putData+0x70>
 3ca:	53 c0       	rjmp	.+166    	; 0x472 <uart_putData+0x116>
 3cc:	ea 5b       	subi	r30, 0xBA	; 186
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	c7 c1       	rjmp	.+910    	; 0x760 <__tablejump2__>
			case 'c':
				data_pnt = va_arg(ap, char*);
 3d2:	f5 01       	movw	r30, r10
 3d4:	b0 81       	ld	r27, Z
 3d6:	b9 83       	std	Y+1, r27	; 0x01
 3d8:	22 e0       	ldi	r18, 0x02	; 2
 3da:	a2 0e       	add	r10, r18
 3dc:	b1 1c       	adc	r11, r1
 3de:	21 80       	ldd	r2, Z+1	; 0x01
				data_length = sizeof(char);
 3e0:	33 24       	eor	r3, r3
 3e2:	33 94       	inc	r3
				break;
 3e4:	70 c0       	rjmp	.+224    	; 0x4c6 <uart_putData+0x16a>
			case 'i':
				data_pnt = (char*) va_arg(ap, int*);
 3e6:	d5 01       	movw	r26, r10
 3e8:	bc 91       	ld	r27, X
 3ea:	b9 83       	std	Y+1, r27	; 0x01
 3ec:	f5 01       	movw	r30, r10
 3ee:	21 80       	ldd	r2, Z+1	; 0x01
 3f0:	95 01       	movw	r18, r10
 3f2:	2e 5f       	subi	r18, 0xFE	; 254
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	59 01       	movw	r10, r18
				data_length = sizeof(int);
 3f8:	68 94       	set
 3fa:	33 24       	eor	r3, r3
 3fc:	31 f8       	bld	r3, 1
				break;
 3fe:	63 c0       	rjmp	.+198    	; 0x4c6 <uart_putData+0x16a>
			case 'l':
				data_pnt = (char*) va_arg(ap, long*);
 400:	d5 01       	movw	r26, r10
 402:	bc 91       	ld	r27, X
 404:	b9 83       	std	Y+1, r27	; 0x01
 406:	f5 01       	movw	r30, r10
 408:	21 80       	ldd	r2, Z+1	; 0x01
 40a:	95 01       	movw	r18, r10
 40c:	2e 5f       	subi	r18, 0xFE	; 254
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	59 01       	movw	r10, r18
				data_length = sizeof(long);
 412:	68 94       	set
 414:	33 24       	eor	r3, r3
 416:	32 f8       	bld	r3, 2
				break;
 418:	56 c0       	rjmp	.+172    	; 0x4c6 <uart_putData+0x16a>
			case 'f':
				data_pnt = (char*) va_arg(ap, float*);
 41a:	f5 01       	movw	r30, r10
 41c:	30 81       	ld	r19, Z
 41e:	39 83       	std	Y+1, r19	; 0x01
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	a8 0e       	add	r10, r24
 424:	b1 1c       	adc	r11, r1
 426:	21 80       	ldd	r2, Z+1	; 0x01
				data_length = sizeof(float);
 428:	68 94       	set
 42a:	33 24       	eor	r3, r3
 42c:	32 f8       	bld	r3, 2
				break;
 42e:	4b c0       	rjmp	.+150    	; 0x4c6 <uart_putData+0x16a>
			case 's':
				data_pnt = (char*) va_arg(ap, short*);
 430:	f5 01       	movw	r30, r10
 432:	90 81       	ld	r25, Z
 434:	99 83       	std	Y+1, r25	; 0x01
 436:	a2 e0       	ldi	r26, 0x02	; 2
 438:	aa 0e       	add	r10, r26
 43a:	b1 1c       	adc	r11, r1
 43c:	21 80       	ldd	r2, Z+1	; 0x01
				data_length = sizeof(short);
 43e:	68 94       	set
 440:	33 24       	eor	r3, r3
 442:	31 f8       	bld	r3, 1
				break;
 444:	40 c0       	rjmp	.+128    	; 0x4c6 <uart_putData+0x16a>
			case 'L':
				data_pnt = (char*) va_arg(ap, long long*);
 446:	f5 01       	movw	r30, r10
 448:	b0 81       	ld	r27, Z
 44a:	b9 83       	std	Y+1, r27	; 0x01
 44c:	22 e0       	ldi	r18, 0x02	; 2
 44e:	a2 0e       	add	r10, r18
 450:	b1 1c       	adc	r11, r1
 452:	21 80       	ldd	r2, Z+1	; 0x01
				data_length = sizeof(long long);
 454:	68 94       	set
 456:	33 24       	eor	r3, r3
 458:	33 f8       	bld	r3, 3
				break;
 45a:	35 c0       	rjmp	.+106    	; 0x4c6 <uart_putData+0x16a>
			case 'd':
				data_pnt = (char*) va_arg(ap, double*);
 45c:	f5 01       	movw	r30, r10
 45e:	30 81       	ld	r19, Z
 460:	39 83       	std	Y+1, r19	; 0x01
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	a8 0e       	add	r10, r24
 466:	b1 1c       	adc	r11, r1
 468:	21 80       	ldd	r2, Z+1	; 0x01
				data_length = sizeof(double);
 46a:	68 94       	set
 46c:	33 24       	eor	r3, r3
 46e:	32 f8       	bld	r3, 2
				break;
 470:	2a c0       	rjmp	.+84     	; 0x4c6 <uart_putData+0x16a>
		}

		for (int k = 0; k < data_length; k++){
 472:	c3 2c       	mov	r12, r3
 474:	d1 2c       	mov	r13, r1
 476:	1c 14       	cp	r1, r12
 478:	1d 04       	cpc	r1, r13
 47a:	dc f4       	brge	.+54     	; 0x4b2 <uart_putData+0x156>
 47c:	e9 80       	ldd	r14, Y+1	; 0x01
 47e:	f2 2c       	mov	r15, r2
	char data_length;
	va_start (ap, formatstr);         /* Initialize the argument list. */	

	uart_putc(STARTSTOPBYTE);
	
	for (int i = 0; i <= narg; i++){
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
				data_length = sizeof(double);
				break;
		}

		for (int k = 0; k < data_length; k++){
			switch(*(data_pnt+k)){
 484:	d7 01       	movw	r26, r14
 486:	8d 91       	ld	r24, X+
 488:	7d 01       	movw	r14, r26
 48a:	8d 37       	cpi	r24, 0x7D	; 125
 48c:	39 f0       	breq	.+14     	; 0x49c <uart_putData+0x140>
 48e:	8e 37       	cpi	r24, 0x7E	; 126
 490:	51 f4       	brne	.+20     	; 0x4a6 <uart_putData+0x14a>
				case STARTSTOPBYTE: uart_putc(ESCBYTE); uart_putc(STARTSTOPBYTE); break;
 492:	8d e7       	ldi	r24, 0x7D	; 125
 494:	4e df       	rcall	.-356    	; 0x332 <uart_putc>
 496:	8e e7       	ldi	r24, 0x7E	; 126
 498:	4c df       	rcall	.-360    	; 0x332 <uart_putc>
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <uart_putData+0x14c>
				case ESCBYTE: uart_putc(ESCBYTE); uart_putc(ESCBYTE); break;
 49c:	8d e7       	ldi	r24, 0x7D	; 125
 49e:	49 df       	rcall	.-366    	; 0x332 <uart_putc>
 4a0:	8d e7       	ldi	r24, 0x7D	; 125
 4a2:	47 df       	rcall	.-370    	; 0x332 <uart_putc>
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <uart_putData+0x14c>
				default: uart_putc(*(data_pnt+k));
 4a6:	45 df       	rcall	.-374    	; 0x332 <uart_putc>
				data_pnt = (char*) va_arg(ap, double*);
				data_length = sizeof(double);
				break;
		}

		for (int k = 0; k < data_length; k++){
 4a8:	0f 5f       	subi	r16, 0xFF	; 255
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	0c 15       	cp	r16, r12
 4ae:	1d 05       	cpc	r17, r13
 4b0:	4c f3       	brlt	.-46     	; 0x484 <uart_putData+0x128>
	char data_length;
	va_start (ap, formatstr);         /* Initialize the argument list. */	

	uart_putc(STARTSTOPBYTE);
	
	for (int i = 0; i <= narg; i++){
 4b2:	bf ef       	ldi	r27, 0xFF	; 255
 4b4:	8b 1a       	sub	r8, r27
 4b6:	9b 0a       	sbc	r9, r27
 4b8:	68 14       	cp	r6, r8
 4ba:	79 04       	cpc	r7, r9
 4bc:	0c f0       	brlt	.+2      	; 0x4c0 <uart_putData+0x164>
 4be:	7a cf       	rjmp	.-268    	; 0x3b4 <uart_putData+0x58>
				case ESCBYTE: uart_putc(ESCBYTE); uart_putc(ESCBYTE); break;
				default: uart_putc(*(data_pnt+k));
			}
		}
	}
	uart_putc(STARTSTOPBYTE);
 4c0:	8e e7       	ldi	r24, 0x7E	; 126
 4c2:	37 df       	rcall	.-402    	; 0x332 <uart_putc>
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <uart_putData+0x170>
				data_pnt = (char*) va_arg(ap, double*);
				data_length = sizeof(double);
				break;
		}

		for (int k = 0; k < data_length; k++){
 4c6:	c3 2c       	mov	r12, r3
 4c8:	d1 2c       	mov	r13, r1
 4ca:	d8 cf       	rjmp	.-80     	; 0x47c <uart_putData+0x120>
		}
	}
	uart_putc(STARTSTOPBYTE);
	va_end (ap);                  /* Clean up. */
	return;
}
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	9f 90       	pop	r9
 4e4:	8f 90       	pop	r8
 4e6:	7f 90       	pop	r7
 4e8:	6f 90       	pop	r6
 4ea:	5f 90       	pop	r5
 4ec:	4f 90       	pop	r4
 4ee:	3f 90       	pop	r3
 4f0:	2f 90       	pop	r2
 4f2:	08 95       	ret

000004f4 <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	0b b6       	in	r0, 0x3b	; 59
 500:	0f 92       	push	r0
 502:	2f 93       	push	r18
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 50c:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 510:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 514:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 516:	e0 91 08 01 	lds	r30, 0x0108
 51a:	ef 5f       	subi	r30, 0xFF	; 255
 51c:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART1_RxTail ) {
 51e:	90 91 07 01 	lds	r25, 0x0107
 522:	e9 17       	cp	r30, r25
 524:	39 f0       	breq	.+14     	; 0x534 <__vector_28+0x40>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 526:	e0 93 08 01 	sts	0x0108, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	e5 5f       	subi	r30, 0xF5	; 245
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	20 83       	st	Z, r18
 532:	01 c0       	rjmp	.+2      	; 0x536 <__vector_28+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 534:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 536:	90 91 06 01 	lds	r25, 0x0106
 53a:	89 2b       	or	r24, r25
 53c:	80 93 06 01 	sts	0x0106, r24
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0b be       	out	0x3b, r0	; 59
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	0b b6       	in	r0, 0x3b	; 59
 564:	0f 92       	push	r0
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 56e:	90 91 0a 01 	lds	r25, 0x010A
 572:	80 91 09 01 	lds	r24, 0x0109
 576:	98 17       	cp	r25, r24
 578:	69 f0       	breq	.+26     	; 0x594 <__vector_29+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 57a:	e0 91 09 01 	lds	r30, 0x0109
 57e:	ef 5f       	subi	r30, 0xFF	; 255
 580:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 582:	e0 93 09 01 	sts	0x0109, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	e5 5b       	subi	r30, 0xB5	; 181
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
 58c:	80 81       	ld	r24, Z
 58e:	80 93 ce 00 	sts	0x00CE, r24
 592:	05 c0       	rjmp	.+10     	; 0x59e <__vector_29+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 594:	e9 ec       	ldi	r30, 0xC9	; 201
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	8f 7d       	andi	r24, 0xDF	; 223
 59c:	80 83       	st	Z, r24
    }
}
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	0f 90       	pop	r0
 5a8:	0b be       	out	0x3b, r0	; 59
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <main>:
// 	int innt = 12412;
// 	long long1 = -123456789;
// 	float float1 = 3.1415926;
// 	double double1 = -2.81;
// 	
    uart_init( UART_BAUD_SELECT(BAUD,F_CPU) );
 5b4:	8f e5       	ldi	r24, 0x5F	; 95
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	a3 de       	rcall	.-698    	; 0x300 <uart_init>
	sei();
 5ba:	78 94       	sei
	TC1_Setup();
 5bc:	4b d0       	rcall	.+150    	; 0x654 <TC1_Setup>
    while (1) 
    {
    }
 5be:	ff cf       	rjmp	.-2      	; 0x5be <main+0xa>

000005c0 <mpu6050_readAccelerometerDataRaw>:
	return;
}



void mpu6050_readAccelerometerDataRaw(int *xData, int *yData, int *zData){
 5c0:	df 92       	push	r13
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	7c 01       	movw	r14, r24
 5d0:	8b 01       	movw	r16, r22
 5d2:	ea 01       	movw	r28, r20
		*xData = (int) i2c_readByte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H) << 8 | i2c_readByte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L);
 5d4:	6b e3       	ldi	r22, 0x3B	; 59
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	80 ed       	ldi	r24, 0xD0	; 208
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	2e de       	rcall	.-932    	; 0x23a <i2c_readByte>
 5de:	d8 2e       	mov	r13, r24
 5e0:	6c e3       	ldi	r22, 0x3C	; 60
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	80 ed       	ldi	r24, 0xD0	; 208
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	28 de       	rcall	.-944    	; 0x23a <i2c_readByte>
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	3d 2d       	mov	r19, r13
 5f0:	82 2b       	or	r24, r18
 5f2:	93 2b       	or	r25, r19
 5f4:	f7 01       	movw	r30, r14
 5f6:	91 83       	std	Z+1, r25	; 0x01
 5f8:	80 83       	st	Z, r24
		*yData = (int) i2c_readByte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H) << 8 | i2c_readByte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L);
 5fa:	6d e3       	ldi	r22, 0x3D	; 61
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 ed       	ldi	r24, 0xD0	; 208
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	1b de       	rcall	.-970    	; 0x23a <i2c_readByte>
 604:	f8 2e       	mov	r15, r24
 606:	6e e3       	ldi	r22, 0x3E	; 62
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	80 ed       	ldi	r24, 0xD0	; 208
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	15 de       	rcall	.-982    	; 0x23a <i2c_readByte>
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	3f 2d       	mov	r19, r15
 616:	82 2b       	or	r24, r18
 618:	93 2b       	or	r25, r19
 61a:	f8 01       	movw	r30, r16
 61c:	91 83       	std	Z+1, r25	; 0x01
 61e:	80 83       	st	Z, r24
		*zData = (int) i2c_readByte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H) << 8 | i2c_readByte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L);
 620:	6f e3       	ldi	r22, 0x3F	; 63
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	80 ed       	ldi	r24, 0xD0	; 208
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	08 de       	rcall	.-1008   	; 0x23a <i2c_readByte>
 62a:	18 2f       	mov	r17, r24
 62c:	60 e4       	ldi	r22, 0x40	; 64
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 ed       	ldi	r24, 0xD0	; 208
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 de       	rcall	.-1020   	; 0x23a <i2c_readByte>
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	31 2f       	mov	r19, r17
 63c:	82 2b       	or	r24, r18
 63e:	93 2b       	or	r25, r19
 640:	99 83       	std	Y+1, r25	; 0x01
 642:	88 83       	st	Y, r24
		return;
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	08 95       	ret

00000654 <TC1_Setup>:
void TC1_Setup ( void )
{
// Setting TC1 Control Register A -
// TCCR1A |=
// Setting TC1 Control Register B - Clock Select, prescaler
TCCR1B	|= (1 << ICNC1 | 1 << ICES1 | 1 << CS10 | 0 << CS11 | 1 << CS12 );
 654:	e1 e8       	ldi	r30, 0x81	; 129
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	85 6c       	ori	r24, 0xC5	; 197
 65c:	80 83       	st	Z, r24
 65e:	08 95       	ret

00000660 <TC1_Read>:
unsigned int TC1_Read( void )
{
	unsigned char sreg;
	unsigned int i;
	/* Save global interrupt flag */
	sreg = SREG;
 660:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
 662:	f8 94       	cli
	/* Read TCNT1 into i (2-cycle operation) */
	i = TCNT1;
 664:	80 91 84 00 	lds	r24, 0x0084
 668:	90 91 85 00 	lds	r25, 0x0085
	/* Restore global interrupt flag */
	SREG = sreg;
 66c:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 66e:	08 95       	ret

00000670 <__vector_12>:


ISR (TIMER1_CAPT_vect)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	0b b6       	in	r0, 0x3b	; 59
 67c:	0f 92       	push	r0
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	5f 93       	push	r21
 692:	6f 93       	push	r22
 694:	7f 93       	push	r23
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	28 97       	sbiw	r28, 0x08	; 8
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	cd bf       	out	0x3d, r28	; 61
	int xData, yData, zData;
	unsigned int i;
	unsigned char sreg;
	/* Save global interrupt flag */
	sreg = SREG;
 6b0:	8f b7       	in	r24, 0x3f	; 63
	/* Disable interrupts to ensure safe operation*/
	cli();
 6b2:	f8 94       	cli
	// Read IC1 Timestamp (2 cycle-operation)
	IC1TS=ICR1;
 6b4:	20 91 86 00 	lds	r18, 0x0086
 6b8:	30 91 87 00 	lds	r19, 0x0087
 6bc:	30 93 92 01 	sts	0x0192, r19
 6c0:	20 93 91 01 	sts	0x0191, r18
	/* Restore global interrupt flag */
	SREG = sreg;
 6c4:	8f bf       	out	0x3f, r24	; 63
	
	if(IC1TS < IC1TS_OLD) // alternatively check overflow buffer...
 6c6:	80 91 91 01 	lds	r24, 0x0191
 6ca:	90 91 92 01 	lds	r25, 0x0192
 6ce:	80 91 8f 01 	lds	r24, 0x018F
 6d2:	90 91 90 01 	lds	r25, 0x0190
	{
		//TODO: Overflow handling Routine
	}
	//TODO: Get MPU data
	mpu6050_readAccelerometerDataRaw(&xData, &yData, &zData);
 6d6:	7e 01       	movw	r14, r28
 6d8:	85 e0       	ldi	r24, 0x05	; 5
 6da:	e8 0e       	add	r14, r24
 6dc:	f1 1c       	adc	r15, r1
 6de:	8e 01       	movw	r16, r28
 6e0:	0d 5f       	subi	r16, 0xFD	; 253
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	a7 01       	movw	r20, r14
 6e6:	b8 01       	movw	r22, r16
 6e8:	ce 01       	movw	r24, r28
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	6c 01       	movw	r12, r24
 6ee:	68 df       	rcall	.-304    	; 0x5c0 <mpu6050_readAccelerometerDataRaw>
	i = TC1_Read();
 6f0:	b7 df       	rcall	.-146    	; 0x660 <TC1_Read>
 6f2:	98 87       	std	Y+8, r25	; 0x08
 6f4:	8f 83       	std	Y+7, r24	; 0x07
	//TODO: Send MPU data and timestamp via UART
	uart_putData("iiii",&i,&xData,&yData,&zData);
 6f6:	ff 92       	push	r15
 6f8:	ef 92       	push	r14
 6fa:	1f 93       	push	r17
 6fc:	0f 93       	push	r16
 6fe:	df 92       	push	r13
 700:	cf 92       	push	r12
 702:	ce 01       	movw	r24, r28
 704:	07 96       	adiw	r24, 0x07	; 7
 706:	9f 93       	push	r25
 708:	8f 93       	push	r24
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	9f 93       	push	r25
 710:	8f 93       	push	r24
 712:	24 de       	rcall	.-952    	; 0x35c <uart_putData>
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	28 96       	adiw	r28, 0x08	; 8
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	bf 91       	pop	r27
 734:	af 91       	pop	r26
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	3f 91       	pop	r19
 744:	2f 91       	pop	r18
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	0f 90       	pop	r0
 754:	0b be       	out	0x3b, r0	; 59
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__tablejump2__>:
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	00 24       	eor	r0, r0
 766:	00 1c       	adc	r0, r0
 768:	0b be       	out	0x3b, r0	; 59
 76a:	07 90       	elpm	r0, Z+
 76c:	f6 91       	elpm	r31, Z
 76e:	e0 2d       	mov	r30, r0
 770:	09 94       	ijmp

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
