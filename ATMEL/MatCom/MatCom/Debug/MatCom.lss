
MatCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800060  00800060  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a3  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000210  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040b  00000000  00000000  00000d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d1  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006cf  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	00 00       	nop
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	00 00       	nop
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	00 00       	nop
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	00 00       	nop
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	00 00       	nop
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	00 00       	nop
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	00 00       	nop
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	00 00       	nop
  28:	25 c0       	rjmp	.+74     	; 0x74 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	23 c0       	rjmp	.+70     	; 0x74 <__bad_interrupt>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	20 c0       	rjmp	.+64     	; 0x76 <__vector_13>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__vector_14>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	19 c0       	rjmp	.+50     	; 0x74 <__bad_interrupt>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 3c       	cpi	r26, 0xC5	; 197
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	51 d1       	rcall	.+674    	; 0x314 <main>
  72:	78 c1       	rjmp	.+752    	; 0x364 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_13>:
		case STARTSTOPBYTE: uart_putc(ESCBYTE); uart_putc(STARTSTOPBYTE); break;
		case ESCBYTE: uart_putc(ESCBYTE); uart_putc(ESCBYTE); break;
		default: uart_putc(dataByte);
	}
	uart_putc(STARTSTOPBYTE);
}
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	2f 93       	push	r18
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	ef 93       	push	r30
  88:	ff 93       	push	r31
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	2c b1       	in	r18, 0x0c	; 12
  8e:	88 71       	andi	r24, 0x18	; 24
  90:	e0 91 62 00 	lds	r30, 0x0062
  94:	ef 5f       	subi	r30, 0xFF	; 255
  96:	ef 73       	andi	r30, 0x3F	; 63
  98:	90 91 61 00 	lds	r25, 0x0061
  9c:	e9 17       	cp	r30, r25
  9e:	39 f0       	breq	.+14     	; 0xae <__vector_13+0x38>
  a0:	e0 93 62 00 	sts	0x0062, r30
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	eb 59       	subi	r30, 0x9B	; 155
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	20 83       	st	Z, r18
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <__vector_13+0x3a>
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	90 91 60 00 	lds	r25, 0x0060
  b4:	89 2b       	or	r24, r25
  b6:	80 93 60 00 	sts	0x0060, r24
  ba:	ff 91       	pop	r31
  bc:	ef 91       	pop	r30
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_14>:
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
  e0:	90 91 64 00 	lds	r25, 0x0064
  e4:	80 91 63 00 	lds	r24, 0x0063
  e8:	98 17       	cp	r25, r24
  ea:	61 f0       	breq	.+24     	; 0x104 <__vector_14+0x36>
  ec:	e0 91 63 00 	lds	r30, 0x0063
  f0:	ef 5f       	subi	r30, 0xFF	; 255
  f2:	ef 71       	andi	r30, 0x1F	; 31
  f4:	e0 93 63 00 	sts	0x0063, r30
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	eb 55       	subi	r30, 0x5B	; 91
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	80 81       	ld	r24, Z
 100:	8c b9       	out	0x0c, r24	; 12
 102:	01 c0       	rjmp	.+2      	; 0x106 <__vector_14+0x38>
 104:	55 98       	cbi	0x0a, 5	; 10
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <uart_init>:
 118:	10 92 64 00 	sts	0x0064, r1
 11c:	10 92 63 00 	sts	0x0063, r1
 120:	10 92 62 00 	sts	0x0062, r1
 124:	10 92 61 00 	sts	0x0061, r1
 128:	99 23       	and	r25, r25
 12a:	14 f4       	brge	.+4      	; 0x130 <uart_init+0x18>
 12c:	22 e0       	ldi	r18, 0x02	; 2
 12e:	2b b9       	out	0x0b, r18	; 11
 130:	90 78       	andi	r25, 0x80	; 128
 132:	90 bd       	out	0x20, r25	; 32
 134:	89 b9       	out	0x09, r24	; 9
 136:	88 e9       	ldi	r24, 0x98	; 152
 138:	8a b9       	out	0x0a, r24	; 10
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	80 bd       	out	0x20, r24	; 32
 13e:	08 95       	ret

00000140 <uart_getc>:
 140:	90 91 62 00 	lds	r25, 0x0062
 144:	80 91 61 00 	lds	r24, 0x0061
 148:	98 17       	cp	r25, r24
 14a:	a9 f0       	breq	.+42     	; 0x176 <uart_getc+0x36>
 14c:	90 91 61 00 	lds	r25, 0x0061
 150:	9f 5f       	subi	r25, 0xFF	; 255
 152:	9f 73       	andi	r25, 0x3F	; 63
 154:	e9 2f       	mov	r30, r25
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	eb 59       	subi	r30, 0x9B	; 155
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	20 81       	ld	r18, Z
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	90 93 61 00 	sts	0x0061, r25
 166:	10 92 60 00 	sts	0x0060, r1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	98 2f       	mov	r25, r24
 16e:	88 27       	eor	r24, r24
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
 174:	08 95       	ret
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	08 95       	ret

0000017c <uart_putc>:
 17c:	20 91 64 00 	lds	r18, 0x0064
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	2f 71       	andi	r18, 0x1F	; 31
 184:	90 91 63 00 	lds	r25, 0x0063
 188:	29 17       	cp	r18, r25
 18a:	e1 f3       	breq	.-8      	; 0x184 <uart_putc+0x8>
 18c:	e2 2f       	mov	r30, r18
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	eb 55       	subi	r30, 0x5B	; 91
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	80 83       	st	Z, r24
 196:	20 93 64 00 	sts	0x0064, r18
 19a:	55 9a       	sbi	0x0a, 5	; 10
 19c:	08 95       	ret

0000019e <uart_putData>:
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	fb 01       	movw	r30, r22
 1ac:	20 81       	ld	r18, Z
 1ae:	22 23       	and	r18, r18
 1b0:	51 f1       	breq	.+84     	; 0x206 <uart_putData+0x68>
 1b2:	7b 01       	movw	r14, r22
 1b4:	c9 2f       	mov	r28, r25
 1b6:	d8 2f       	mov	r29, r24
 1b8:	8e e7       	ldi	r24, 0x7E	; 126
 1ba:	e0 df       	rcall	.-64     	; 0x17c <uart_putc>
 1bc:	f7 01       	movw	r30, r14
 1be:	80 81       	ld	r24, Z
 1c0:	18 16       	cp	r1, r24
 1c2:	fc f4       	brge	.+62     	; 0x202 <uart_putData+0x64>
 1c4:	0d 2f       	mov	r16, r29
 1c6:	1c 2f       	mov	r17, r28
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	f8 01       	movw	r30, r16
 1ce:	81 91       	ld	r24, Z+
 1d0:	8f 01       	movw	r16, r30
 1d2:	8d 37       	cpi	r24, 0x7D	; 125
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <uart_putData+0x46>
 1d6:	8e 37       	cpi	r24, 0x7E	; 126
 1d8:	51 f4       	brne	.+20     	; 0x1ee <uart_putData+0x50>
 1da:	8d e7       	ldi	r24, 0x7D	; 125
 1dc:	cf df       	rcall	.-98     	; 0x17c <uart_putc>
 1de:	8e e7       	ldi	r24, 0x7E	; 126
 1e0:	cd df       	rcall	.-102    	; 0x17c <uart_putc>
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <uart_putData+0x52>
 1e4:	8d e7       	ldi	r24, 0x7D	; 125
 1e6:	ca df       	rcall	.-108    	; 0x17c <uart_putc>
 1e8:	8d e7       	ldi	r24, 0x7D	; 125
 1ea:	c8 df       	rcall	.-112    	; 0x17c <uart_putc>
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <uart_putData+0x52>
 1ee:	c6 df       	rcall	.-116    	; 0x17c <uart_putc>
 1f0:	21 96       	adiw	r28, 0x01	; 1
 1f2:	f7 01       	movw	r30, r14
 1f4:	80 81       	ld	r24, Z
 1f6:	08 2e       	mov	r0, r24
 1f8:	00 0c       	add	r0, r0
 1fa:	99 0b       	sbc	r25, r25
 1fc:	c8 17       	cp	r28, r24
 1fe:	d9 07       	cpc	r29, r25
 200:	2c f3       	brlt	.-54     	; 0x1cc <uart_putData+0x2e>
 202:	8e e7       	ldi	r24, 0x7E	; 126
 204:	bb df       	rcall	.-138    	; 0x17c <uart_putc>
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <uart_getData>:
Purpose:  receive byte from UART
Input:    none
Returns:  array with length of data as first element and data afterwards
**************************************************************************/
void uart_getData(char *dataArray, signed char *length)
{
 214:	5f 92       	push	r5
 216:	6f 92       	push	r6
 218:	7f 92       	push	r7
 21a:	8f 92       	push	r8
 21c:	9f 92       	push	r9
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	7c 01       	movw	r14, r24
 234:	6b 01       	movw	r12, r22
	int dataByte = 0;
	unsigned char counter = 0;
	int timeoutcounter = 0;
	while (1)
	{
		dataByte = uart_getc();
 236:	84 df       	rcall	.-248    	; 0x140 <uart_getc>
		if (dataByte == UART_NO_DATA){*length = 0; return;}
 238:	81 15       	cp	r24, r1
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	92 07       	cpc	r25, r18
 23e:	19 f4       	brne	.+6      	; 0x246 <uart_getData+0x32>
 240:	f6 01       	movw	r30, r12
 242:	10 82       	st	Z, r1
 244:	57 c0       	rjmp	.+174    	; 0x2f4 <uart_getData+0xe0>
		else{
			if (dataByte == STARTSTOPBYTE){break;}
 246:	8e 37       	cpi	r24, 0x7E	; 126
 248:	91 05       	cpc	r25, r1
 24a:	21 f0       	breq	.+8      	; 0x254 <uart_getData+0x40>
			else{*length = -1; return;} // ERROR ggf Fehlertyp in dataArray schreiben oder andere Fehlerroutine
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	f6 01       	movw	r30, r12
 250:	80 83       	st	Z, r24
 252:	50 c0       	rjmp	.+160    	; 0x2f4 <uart_getData+0xe0>
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	b1 2c       	mov	r11, r1
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
		if (dataByte == UART_NO_DATA){timeoutcounter++;}
		else{
			switch (dataByte)
				{
				case ESCBYTE:if(afterEscBool){dataArray[counter] = ESCBYTE; afterEscBool = 0; counter++;}
					else{afterEscBool = 1;}
 25e:	55 24       	eor	r5, r5
 260:	53 94       	inc	r5
 262:	61 2c       	mov	r6, r1
		dataByte = uart_getc();
		if (dataByte == UART_NO_DATA){timeoutcounter++;}
		else{
			switch (dataByte)
				{
				case ESCBYTE:if(afterEscBool){dataArray[counter] = ESCBYTE; afterEscBool = 0; counter++;}
 264:	0f 2e       	mov	r0, r31
 266:	fd e7       	ldi	r31, 0x7D	; 125
 268:	7f 2e       	mov	r7, r31
 26a:	f0 2d       	mov	r31, r0
 26c:	91 2c       	mov	r9, r1
 26e:	a1 2c       	mov	r10, r1
					else{afterEscBool = 1;}
					break;
				case STARTSTOPBYTE:if(afterEscBool){dataArray[counter] = STARTSTOPBYTE; afterEscBool = 0; counter++;}
 270:	0f 2e       	mov	r0, r31
 272:	fe e7       	ldi	r31, 0x7E	; 126
 274:	8f 2e       	mov	r8, r31
 276:	f0 2d       	mov	r31, r0
		}
	}
		
	while(timeoutcounter <= MAXNUMBERTIMEOUTS)
	{
		dataByte = uart_getc();
 278:	63 df       	rcall	.-314    	; 0x140 <uart_getc>
 27a:	28 2f       	mov	r18, r24
 27c:	39 2f       	mov	r19, r25
		if (dataByte == UART_NO_DATA){timeoutcounter++;}
 27e:	21 15       	cp	r18, r1
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	3f 07       	cpc	r19, r31
 284:	19 f4       	brne	.+6      	; 0x28c <uart_getData+0x78>
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	2d c0       	rjmp	.+90     	; 0x2e6 <uart_getData+0xd2>
		else{
			switch (dataByte)
 28c:	2d 37       	cpi	r18, 0x7D	; 125
 28e:	31 05       	cpc	r19, r1
 290:	21 f0       	breq	.+8      	; 0x29a <uart_getData+0x86>
 292:	2e 37       	cpi	r18, 0x7E	; 126
 294:	31 05       	cpc	r19, r1
 296:	59 f0       	breq	.+22     	; 0x2ae <uart_getData+0x9a>
 298:	18 c0       	rjmp	.+48     	; 0x2ca <uart_getData+0xb6>
				{
				case ESCBYTE:if(afterEscBool){dataArray[counter] = ESCBYTE; afterEscBool = 0; counter++;}
 29a:	cd 2b       	or	r28, r29
 29c:	11 f1       	breq	.+68     	; 0x2e2 <uart_getData+0xce>
 29e:	f7 01       	movw	r30, r14
 2a0:	eb 0d       	add	r30, r11
 2a2:	f1 1d       	adc	r31, r1
 2a4:	70 82       	st	Z, r7
 2a6:	b3 94       	inc	r11
 2a8:	c9 2d       	mov	r28, r9
 2aa:	da 2d       	mov	r29, r10
 2ac:	1c c0       	rjmp	.+56     	; 0x2e6 <uart_getData+0xd2>
					else{afterEscBool = 1;}
					break;
				case STARTSTOPBYTE:if(afterEscBool){dataArray[counter] = STARTSTOPBYTE; afterEscBool = 0; counter++;}
 2ae:	cd 2b       	or	r28, r29
 2b0:	41 f0       	breq	.+16     	; 0x2c2 <uart_getData+0xae>
 2b2:	f7 01       	movw	r30, r14
 2b4:	eb 0d       	add	r30, r11
 2b6:	f1 1d       	adc	r31, r1
 2b8:	80 82       	st	Z, r8
 2ba:	b3 94       	inc	r11
 2bc:	c9 2d       	mov	r28, r9
 2be:	da 2d       	mov	r29, r10
					else{*length = counter-1; return;}
					break;						
 2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <uart_getData+0xd2>
				{
				case ESCBYTE:if(afterEscBool){dataArray[counter] = ESCBYTE; afterEscBool = 0; counter++;}
					else{afterEscBool = 1;}
					break;
				case STARTSTOPBYTE:if(afterEscBool){dataArray[counter] = STARTSTOPBYTE; afterEscBool = 0; counter++;}
					else{*length = counter-1; return;}
 2c2:	ba 94       	dec	r11
 2c4:	f6 01       	movw	r30, r12
 2c6:	b0 82       	st	Z, r11
 2c8:	15 c0       	rjmp	.+42     	; 0x2f4 <uart_getData+0xe0>
					break;						
				default:if(afterEscBool){*length = -1; return;} // ERROR
 2ca:	20 97       	sbiw	r28, 0x00	; 0
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <uart_getData+0xc2>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	f6 01       	movw	r30, r12
 2d2:	80 83       	st	Z, r24
 2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <uart_getData+0xe0>
					else{dataArray[counter] = dataByte; counter++;}
 2d6:	f7 01       	movw	r30, r14
 2d8:	eb 0d       	add	r30, r11
 2da:	f1 1d       	adc	r31, r1
 2dc:	80 83       	st	Z, r24
 2de:	b3 94       	inc	r11
					break;
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <uart_getData+0xd2>
		if (dataByte == UART_NO_DATA){timeoutcounter++;}
		else{
			switch (dataByte)
				{
				case ESCBYTE:if(afterEscBool){dataArray[counter] = ESCBYTE; afterEscBool = 0; counter++;}
					else{afterEscBool = 1;}
 2e2:	c5 2d       	mov	r28, r5
 2e4:	d6 2d       	mov	r29, r6
			if (dataByte == STARTSTOPBYTE){break;}
			else{*length = -1; return;} // ERROR ggf Fehlertyp in dataArray schreiben oder andere Fehlerroutine
		}
	}
		
	while(timeoutcounter <= MAXNUMBERTIMEOUTS)
 2e6:	09 39       	cpi	r16, 0x99	; 153
 2e8:	8a e3       	ldi	r24, 0x3A	; 58
 2ea:	18 07       	cpc	r17, r24
 2ec:	2c f2       	brlt	.-118    	; 0x278 <uart_getData+0x64>
					else{dataArray[counter] = dataByte; counter++;}
					break;
				}
			}
	}	
	*length = -1; return;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	f6 01       	movw	r30, r12
 2f2:	80 83       	st	Z, r24
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	bf 90       	pop	r11
 306:	af 90       	pop	r10
 308:	9f 90       	pop	r9
 30a:	8f 90       	pop	r8
 30c:	7f 90       	pop	r7
 30e:	6f 90       	pop	r6
 310:	5f 90       	pop	r5
 312:	08 95       	ret

00000314 <main>:
#include "../../../lib/bmp085.h"
#include "../../../lib/uart.h"
//#include "../../../lib/twimaster.h"

int main(void)
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	6f 97       	sbiw	r28, 0x1f	; 31
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
	// initializing uart data variables for storage of incoming data
	signed char uart_data_length = -1;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	89 83       	std	Y+1, r24	; 0x01
	char uart_data_array[30] = {0};
 32c:	fe 01       	movw	r30, r28
 32e:	32 96       	adiw	r30, 0x02	; 2
 330:	8e e1       	ldi	r24, 0x1E	; 30
 332:	df 01       	movw	r26, r30
 334:	1d 92       	st	X+, r1
 336:	8a 95       	dec	r24
 338:	e9 f7       	brne	.-6      	; 0x334 <main+0x20>
	
    uart_init( UART_BAUD_SELECT(BAUD,F_CPU) );
 33a:	8f e5       	ldi	r24, 0x5F	; 95
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	ec de       	rcall	.-552    	; 0x118 <uart_init>
	sei();
 340:	78 94       	sei
    while (1) 
    {
		uart_getData(uart_data_array, &uart_data_length);
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	ce 01       	movw	r24, r28
 34a:	02 96       	adiw	r24, 0x02	; 2
 34c:	63 df       	rcall	.-314    	; 0x214 <uart_getData>
		if(uart_data_length != -1 && uart_data_length != 0)
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	b0 f3       	brcs	.-20     	; 0x342 <main+0x2e>
		{
			uart_putData(uart_data_array, &uart_data_length);	
 356:	be 01       	movw	r22, r28
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	ce 01       	movw	r24, r28
 35e:	02 96       	adiw	r24, 0x02	; 2
 360:	1e df       	rcall	.-452    	; 0x19e <uart_putData>
 362:	ef cf       	rjmp	.-34     	; 0x342 <main+0x2e>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
